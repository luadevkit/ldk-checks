-- luacheck: ignore 212

describe("#checks", function()
  local checks = require 'ldk.checks'
  local function blame(f)
    local code = [[
      local function f(_) checks.%s end        -- 1
      local function g() f() end               -- 2
      local _, err = pcall(function() g() end) -- 3
      return err                               -- 4
    ]]
    return (load(code:format(f), 'caller', 'table', {checks = checks, pcall = pcall}))()
  end
  describe("#arg_error", function()
    local function arg_error(...)
      local args = table.pack(...)
      return function()
        checks.arg_error(table.unpack(args))
      end
    end
    it("should report bad arguments", function()
      assert.error(arg_error(), "bad argument #1 to 'arg_error' (number expected, got no value)")
      assert.error(arg_error('not a number'), "bad argument #1 to 'arg_error' (number expected, got string)")
      assert.error(arg_error(1.337), "bad argument #1 to 'arg_error' (number has no integer representation)")
      assert.error(arg_error(1, {}), "bad argument #2 to 'arg_error' (string expected, got table)")
      assert.error(arg_error(1, false), "bad argument #2 to 'arg_error' (string expected, got boolean)")
    end)
    it("should report the correct function name (global)", function()
      global_fn = function(arg, message)
        checks.arg_error(arg, message)
      end
      assert.error(function() global_fn(1) end, "bad argument #1 to 'global_fn'")
    end)
    it("should report the correct function name (local)", function()
      local local_fn = function(arg, message)
        checks.arg_error(arg, message)
      end
      assert.error(function() local_fn(1) end, "bad argument #1 to 'local_fn'")
    end)
    it("should raise an argument error", function()
      assert.error(arg_error(1), "bad argument #1 to '?'")
      assert.error(arg_error(1, "message"), "bad argument #1 to '?' (message)")
    end)
    it("should blame the correct call site", function()
      assert.matches(":2: bad argument", blame('arg_error(1)'))
    end)
  end)
  describe("#check_arg", function()
    local function check_arg(...)
      local args = table.pack(...)
      return function()
        checks.check_arg(table.unpack(args))
      end
    end
    it("should report bad arguments", function()
      assert.error(check_arg(), "bad argument #1 to 'check_arg' (number expected, got no value)")
      assert.error(check_arg('not a number'), "bad argument #1 to 'check_arg' (number expected, got string)")
      assert.error(check_arg(1.337), "bad argument #1 to 'check_arg' (number has no integer representation)")
      assert.error(check_arg(1, false, {}), "bad argument #3 to 'check_arg' (string expected, got table)")
      assert.error(check_arg(1, false, true), "bad argument #3 to 'check_arg' (string expected, got boolean)")
    end)
    it("should raise an argument error", function()
      assert.error(check_arg(1, false), "bad argument #1 to '?'")
      assert.error(check_arg(1, false, "message"), "bad argument #1 to '?' (message)")
      assert.no_error(check_arg(1, true))
    end)
  end)
  describe("#check_types", function()
    local function f1_1(tag, x)
      local function f(_) checks.check_types(tag) end
      return function() f(x) end
    end
    local function f1_3(tag1, x, y, z)
      local function f(_, _, _) checks.check_types(tag1) end
      return function() f(x, y, z) end
    end
    local function f2_1(tag1, tag2, x)
      local function f(_) checks.check_types(tag1, tag2) end
      return function() f(x) end
    end
    local function f2_2(tag1, tag2, x, y)
      local function f(_, _) checks.check_types(tag1, tag2) end
      return function() f(x, y) end
    end
    local function fn_n(...) checks.check_types('*string') end
    it("should report errors", function()
      assert.error(f1_1('boolean', nil), "bad argument #1 to 'f' (boolean expected, got nil)")
      assert.error(f1_1('function', {1337}), "bad argument #1 to 'f' (function expected, got table)")
      assert.error(f2_2('boolean', 'string', nil, nil), "bad argument #1 to 'f' (boolean expected, got nil)")
      assert.error(f2_2('boolean', 'string', true, nil), "bad argument #2 to 'f' (string expected, got nil)")
      assert.error(f1_3('*string', '1', 2, 3), "bad argument #2 to 'f' (string expected, got number)")
    end)
    it("should report missing arguments", function()
      assert.error(f2_1('boolean', 'string', true), "bad argument #2 to 'f' (string expected, got no value)")
    end)
    it("should not raise if there are not more arguments", function()
      assert.not_error(function() fn_n() end)
    end)
  end)
  describe("#register", function()
    local function f(x)
      checks.check_types('object')
    end
  it("should report bad arguments", function()
      assert.error(function() checks.register(1337) end, "bad argument #1 to 'register' (string expected, got number)")
      assert.error(function() checks.register('object') end, "bad argument #2 to 'register' (function expected, got no value)")
      assert.error(function() checks.register('object', 'not a function') end, "bad argument #2 to 'register' (function expected, got string)");
    end)
    it("should register/unregister a check", function()
      assert.is_false(checks.is_registered('object'))
      checks.register('object', function() return true end)
      assert.is_true(checks.is_registered('object'))
      checks.unregister('object')
      assert.is_false(checks.is_registered('object'))
    end)
    it("should raise an error if registering multiple times", function()
      checks.register('object', function() return true end)
      assert.error(function() checks.register('object', function() end) end, "type 'object' already registered")
      checks.unregister('object')
    end)
    it("should properly check the custom type", function()
      checks.register("object", function() return true end)
      assert.not_error(function() f({}) end)
      checks.unregister('object')
      assert.error(function() f({}) end)
    end)
  end)
  describe("#check_type", function()
    local function f1(arg, tag, x)
      local function f(_) checks.check_type(arg, tag) end
      return function() f(x) end
    end
    it("should report bad arguments", function()
      local function check_type(...)
        local args = table.pack(...)
        return function() checks.check_type(table.unpack(args)) end
      end
      assert.error(check_type(), "bad argument #1 to 'check_type' (number expected, got no value)")
      assert.error(check_type(1), "bad argument #2 to 'check_type' (string expected, got no value)")
      assert.error(check_type(nil, 'string'), "bad argument #1 to 'check_type' (number expected, got nil)")
      assert.error(check_type('string', 'string'), "bad argument #1 to 'check_type' (number expected, got string)")
      assert.error(check_type(1, 'string'), "bad argument #1 to 'check_type' (invalid argument index)")
      assert.error(check_type(1), "bad argument #2 to 'check_type' (string expected, got no value)")
      assert.error(check_type(1, {1337}), "bad argument #2 to 'check_type' (string expected, got table)")
    end)
    it("blames the call site", function()
      assert.matches(":2: bad argument #1 to", blame('check_type(1, "integer")'))
    end)
    describe("(primitive types)", function()
      it("should report missing arguments", function()
        assert.error(f1(1, 'boolean', nil), "bad argument #1 to 'f' (boolean expected, got nil)")
        assert.error(f1(1, 'thread', nil), "bad argument #1 to 'f' (thread expected, got nil)")
        assert.error(f1(1, 'function', nil), "bad argument #1 to 'f' (function expected, got nil)")
        assert.error(f1(1, 'file', nil), "bad argument #1 to 'f' (file expected, got nil)")
        assert.error(f1(1, 'integer', nil), "bad argument #1 to 'f' (integer expected, got nil)")
        assert.error(f1(1, 'number', nil), "bad argument #1 to 'f' (number expected, got nil)")
        assert.error(f1(1, 'string', nil), "bad argument #1 to 'f' (string expected, got nil)")
        assert.error(f1(1, 'table', nil), "bad argument #1 to 'f' (table expected, got nil)")
        assert.error(f1(1, 'userdata', nil), "bad argument #1 to 'f' (userdata expected, got nil)")
        assert.error(f1(1, 'integer'), "bad argument #1 to 'f' (integer expected, got nil)")
      end)
      it("should report mismatched types", function()
        assert.error(f1(1, 'boolean', {1337}), "bad argument #1 to 'f' (boolean expected, got table)")
        assert.error(f1(1, 'thread', {1337}), "bad argument #1 to 'f' (thread expected, got table)")
        assert.error(f1(1, 'function', {1337}), "bad argument #1 to 'f' (function expected, got table)")
        assert.error(f1(1, 'file', {1337}), "bad argument #1 to 'f' (file expected, got table)")
        assert.error(f1(1, 'integer', {1337}), "bad argument #1 to 'f' (integer expected, got table)")
        assert.error(f1(1, 'number', {1337}), "bad argument #1 to 'f' (number expected, got table)")
        assert.error(f1(1, 'string', {1337}), "bad argument #1 to 'f' (string expected, got table)")
        assert.error(f1(1, 'table', '1337'), "bad argument #1 to 'f' (table expected, got string)")
        assert.error(f1(1, 'userdata', {1337}), "bad argument #1 to 'f' (userdata expected, got table)")
        assert.error(f1(1, 'integer', {1337}), "bad argument #1 to 'f' (integer expected, got table)")
        assert.error(f1(1, 'integer', 1.337), "bad argument #1 to 'f' (integer expected, got number)")
        assert.error(f1(1, 'integer', 1.337e3), "bad argument #1 to 'f' (integer expected, got number)")
      end)
      it("should match types", function()
        assert.not_error(f1(1, 'boolean', true))
        assert.not_error(f1(1, 'thread', coroutine.create(function() end)))
        assert.not_error(f1(1, 'function', function() end))
        assert.not_error(f1(1, 'file', io.stderr))
        assert.not_error(f1(1, 'number', 1.337e3))
        assert.not_error(f1(1, 'string', "a string"))
        assert.not_error(f1(1, 'table', {}))
        assert.not_error(f1(1, 'userdata', io.stderr))
        assert.not_error(f1(1, 'file', io.stderr))
        assert.not_error(f1(1, 'FILE*', io.stderr))
        assert.not_error(f1(1, 'integer', 1337))
      end)
      it("should match optional types", function()
        assert.not_error(f1(1, '?boolean', nil))
        assert.not_error(f1(1, '?thread', nil))
        assert.not_error(f1(1, '?function', nil))
        assert.not_error(f1(1, '?file', nil))
        assert.not_error(f1(1, '?number', nil))
        assert.not_error(f1(1, '?string', nil))
        assert.not_error(f1(1, '?table', nil))
        assert.not_error(f1(1, '?userdata', nil))
        assert.not_error(f1(1, '?integer', nil))
      end)
      it("should match types (negative match)", function()
        assert.not_error(f1(1, '!boolean', 'true'))
        assert.error(f1(1, '!boolean', true), "bad argument #1 to 'f' (not boolean expected, got boolean)")
        assert.error(f1(1, '!boolean|number', true), "bad argument #1 to 'f' (not boolean or number expected, got boolean)")
        assert.error(f1(1, '!boolean|number', 2), "bad argument #1 to 'f' (not boolean or number expected, got number)")
      end)
      it("should properly format the descriptor", function()
        assert.error(f1(1, '?a', {1337}), "bad argument #1 to 'f' (nil or a expected, got table)")
        assert.error(f1(1, '?a|b', {1337}), "bad argument #1 to 'f' (nil, a or b expected, got table)")
        assert.error(f1(1, '?a|b|c', {1337}), "bad argument #1 to 'f' (nil, a, b, or c expected, got table)")
      end)
    end)
    describe("(named types)", function()
      local foo = setmetatable({}, { __type = "foo" })
      local goo = setmetatable({}, { __type = "goo" })
      it("should report missing arguments", function()
        assert.error(f1(1, 'foo'), "bad argument #1 to 'f' (foo expected, got nil)")
      end)
      it("report mismatching types", function()
        assert.error(f1(1, 'foo', {}), "bad argument #1 to 'f' (foo expected, got table)")
        assert.error(f1(1, 'foo', 1337), "bad argument #1 to 'f' (foo expected, got number)")
        assert.error(f1(1, 'foo', goo), "bad argument #1 to 'f' (foo expected, got table)")
      end)
      it("should match types", function()
        assert.not_error(f1(1, 'foo|goo', foo));
        assert.not_error(f1(1, 'foo|goo', goo));
      end)
    end)
    describe("(any)", function()
      it("should accept anything but nil", function()
        assert.error(f1(1, 'any', nil), "bad argument #1 to 'f' (any expected, got nil)")
      end)
    end)
    describe("(options)", function()
      it("should accept an option", function()
        assert.not_error(f1(1, ':one|two', 'one'))
        assert.not_error(f1(1, ':one|two', 'two'))
        assert.error(f1(1, ':one|two',"bad argument #1 to 'f' ('one' or 'two' expected, got 'three')"))
      end)
    end)
  end)
  describe("#check_option", function()
    local function check_option0()
      return function()
        checks.check_option()
      end
    end
    local function check_option(...)
      local args = table.pack(...)
      return function()
        checks.check_option(table.unpack(args))
      end
    end
    local function f1(arg, tag, x)
      local function f(_)
        checks.check_option(arg, tag)
      end
      return function()
        f(x)
      end
    end
    describe("bad arguments", function()
      it("diagnoses bad argument #1", function()
        assert.error(check_option0(), "bad argument #1 to 'check_option' (number expected, got no value)")
        assert.error(check_option('not a number'), "bad argument #1 to 'check_option' (number expected, got string)")
      end)
      it("diagnoses bad argument #2", function()
        assert.error(check_option(1), "bad argument #2 to 'check_option' (string expected, got no value)")
        assert.error(check_option(1, ''), "bad argument #2 to 'check_option' (empty descriptor)")
      end)
    end)
    describe("with enum types", function()
      it("should report missing arguments", function()
        assert.error(f1(1, 'one'), "bad argument #1 to 'f' (string expected, got nil)")
        assert.error(f1(1, 'one|two'), "bad argument #1 to 'f' (string expected, got nil)")
      end)
      it("should report mismatched types", function()
        assert.error(f1(1, 'one', 'string'), "bad argument #1 to 'f' ('one' expected, got 'string')")
        assert.error(f1(1, 'one', 'two'), "bad argument #1 to 'f' ('one' expected, got 'two')")
        assert.error(f1(1, 'one|two', 'three'), "bad argument #1 to 'f' ('one' or 'two' expected, got 'three')")
        assert.error(f1(1, 'one|two|3', '4'), "bad argument #1 to 'f' ('one', 'two' or '3' expected, got '4')")
        assert.error(f1(1, 'one', 1337), "bad argument #1 to 'f' (string expected, got number)")
        assert.error(f1(1, '?one|two', 'three'), "bad argument #1 to 'f' (nil, 'one' or 'two' expected, got 'three')")
      end)
      it("should match types", function()
        assert.not_error(f1(1, 'one|two', 'one'))
        assert.not_error(f1(1, 'one|two', 'two'))
        assert.not_error(f1(1, '?one|two|three', nil))
      end)
    end)
    describe("blame site", function()
      it("blames the call site", function()
        assert.matches(":2: bad argument #1 to", blame('check_option(1, "opt")'))
      end)
    end)
  end)
end)
